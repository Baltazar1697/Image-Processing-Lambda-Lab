name: CI/CD Pipeline

on:
  push:
    paths:
      - 'terraform/environments/prod/**'
      - 'modules/**'
      - 'lambda/**'
workflow_dispatch:

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/prod

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform/environments/prod

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/prod

      - name: Terraform Plan
        run: terraform plan -out=plan.cache
        working-directory: ./terraform/environments/prod

      - name: Save Plan
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: ./terraform/environments/prod/plan.cache

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Download Plan
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: ./terraform/environments/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.cache
        working-directory: ./terraform/environments/prod

  # docker_build:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       lambda_name: [resize, crop, black-white]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to AWS ECR
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build and Push Docker image
  #       run: |
  #         docker build -t ${{ secrets.ECR_REPO_URL }}:${{ matrix.lambda_name }} lambda/${{ matrix.lambda_name }} --build-arg lambda_name=${{ matrix.lambda_name }}
  #         docker push ${{ secrets.ECR_REPO_URL }}:${{ matrix.lambda_name }}
